# Windsurf Workplace Coding Guidelines

## 1. Project Structure and Organization

### 1.1 File Placement
- All URL endpoints MUST be defined in `url_endpoints.py`
- Each feature should have its dedicated feature-specific file (e.g., `water_quality.py` for water quality-related functionality)
- Maintain a clear and logical directory structure

## 2. Coding Practices

### 2.1 Hard Coding Prohibition
- NEVER hard-code values, configurations, or sensitive information
- Use environment variables, configuration files, or constants for all configurable values

### 2.2 Modularity and Separation of Concerns
- Each module/file should have a single, well-defined responsibility
- Keep functions and methods focused and concise
- Use type hints and docstrings to clearly define function purposes and inputs/outputs

### 2.3 URL Endpoint Management
- All route definitions must be centralized in `url_endpoints.py`
- Use descriptive and consistent naming conventions for endpoints
- Implement proper error handling and validation for all endpoints

## 3. Configuration and Environment

## 4. Code Quality and Best Practices

### 4.1 Code Review Guidelines
- All code changes must go through a peer review process
- Follow PEP 8 style guidelines for Python code
- Use type annotations and maintain high code readability
- Write comprehensive docstrings for all functions and classes

### 4.2 Error Handling
- Implement robust error handling and logging
- Use specific exception types
- Log errors with sufficient context for debugging

## 5. Performance and Optimization

### 5.1 Database Interactions
- Use database indexing and query optimization techniques
- Implement caching where appropriate
- Minimize database round trips

### 5.2 Code Efficiency
- Avoid unnecessary computations
- Use list comprehensions and generator expressions
- Profile and optimize performance-critical code paths

## 6. Documentation

### 6.1 Code Documentation
- Maintain a comprehensive README.md
- Document project idea
- Keep inline comments clear and concise
- Update documentation with each significant change


### 7.1 Internationalization
- Use translation files for multilingual support
- Implement language toggle functionality
- Support both French and Arabic languages
- Use consistent translation methods

---

**Note**: These guidelines are living documents. They should be regularly reviewed and updated to reflect the evolving needs of the project and best practices in software development.
